/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package csnd6;

public class CsoundPerformanceThread {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected CsoundPerformanceThread(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(CsoundPerformanceThread obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        csndJNI.delete_CsoundPerformanceThread(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public int isRunning() {
    return csndJNI.CsoundPerformanceThread_isRunning(swigCPtr, this);
  }

  public SWIGTYPE_p_void GetProcessCallback() {
    long cPtr = csndJNI.CsoundPerformanceThread_GetProcessCallback(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public void SetProcessCallback(SWIGTYPE_p_f_p_void__void Callback, SWIGTYPE_p_void cbdata) {
    csndJNI.CsoundPerformanceThread_SetProcessCallback(swigCPtr, this, SWIGTYPE_p_f_p_void__void.getCPtr(Callback), SWIGTYPE_p_void.getCPtr(cbdata));
  }

  public SWIGTYPE_p_CSOUND_ GetCsound() {
    long cPtr = csndJNI.CsoundPerformanceThread_GetCsound(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_CSOUND_(cPtr, false);
  }

  public int GetStatus() {
    return csndJNI.CsoundPerformanceThread_GetStatus(swigCPtr, this);
  }

  public void Play() {
    csndJNI.CsoundPerformanceThread_Play(swigCPtr, this);
  }

  public void Pause() {
    csndJNI.CsoundPerformanceThread_Pause(swigCPtr, this);
  }

  public void TogglePause() {
    csndJNI.CsoundPerformanceThread_TogglePause(swigCPtr, this);
  }

  public void Stop() {
    csndJNI.CsoundPerformanceThread_Stop(swigCPtr, this);
  }

  public void Record(String filename, int samplebits, int numbufs) {
    csndJNI.CsoundPerformanceThread_Record__SWIG_0(swigCPtr, this, filename, samplebits, numbufs);
  }

  public void Record(String filename, int samplebits) {
    csndJNI.CsoundPerformanceThread_Record__SWIG_1(swigCPtr, this, filename, samplebits);
  }

  public void Record(String filename) {
    csndJNI.CsoundPerformanceThread_Record__SWIG_2(swigCPtr, this, filename);
  }

  public void StopRecord() {
    csndJNI.CsoundPerformanceThread_StopRecord(swigCPtr, this);
  }

  public void ScoreEvent(int absp2mode, char opcod, int pcnt, SWIGTYPE_p_float p) {
    csndJNI.CsoundPerformanceThread_ScoreEvent(swigCPtr, this, absp2mode, opcod, pcnt, SWIGTYPE_p_float.getCPtr(p));
  }

  public void InputMessage(String s) {
    csndJNI.CsoundPerformanceThread_InputMessage(swigCPtr, this, s);
  }

  public void SetScoreOffsetSeconds(double timeVal) {
    csndJNI.CsoundPerformanceThread_SetScoreOffsetSeconds(swigCPtr, this, timeVal);
  }

  public int Join() {
    return csndJNI.CsoundPerformanceThread_Join(swigCPtr, this);
  }

  public void FlushMessageQueue() {
    csndJNI.CsoundPerformanceThread_FlushMessageQueue(swigCPtr, this);
  }

  public CsoundPerformanceThread(Csound arg0) {
    this(csndJNI.new_CsoundPerformanceThread__SWIG_0(Csound.getCPtr(arg0), arg0), true);
  }

  public CsoundPerformanceThread(SWIGTYPE_p_CSOUND_ arg0) {
    this(csndJNI.new_CsoundPerformanceThread__SWIG_1(SWIGTYPE_p_CSOUND_.getCPtr(arg0)), true);
  }

}
